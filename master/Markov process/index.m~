%%
%
%  Markov process. Lab work.
%
%  24.10.2017 05:05:31
%
%

clc;
clear;
% variant ?6
% graph
X = [];
X(0 + 1,1 + 1) = 7;
X(0 + 1,9 + 1) = 4;
X(1 + 1, 0 + 1) = 3;
X(1 + 1, 2 + 1) = 1;
X(1 + 1, 6 + 1) = 1;
X(1 + 1, 9 + 1) = 2;
X(2 + 1, 1 + 1) = 10;
X(2 + 1, 6 + 1) = 8;
X(2 + 1, 8 + 1) = 12;
X(2 + 1, 9 + 1) = 11;
X(3 + 1, 2 + 1) = 2;
X(4 + 1, 1 + 1) = 3;
X(4 + 1, 7 + 1) = 3;
X(4 + 1, 8 + 1) = 2;
X(5 + 1, 0 + 1) = 11;
X(5 + 1, 1 + 1) = 6;
X(6 + 1, 4 + 1) = 3;
X(6 + 1, 8 + 1) = 9;
X(7 + 1, 1 + 1) = 2;
X(7 + 1, 2 + 1) = 1;
X(7 + 1, 3 + 1) = 1;
X(7 + 1, 4 + 1) = 1;
X(8 + 1, 1 + 1) = 3;
X(8 + 1, 2 + 1) = 3;
X(8 + 1, 3 + 1) = 3;
X(8 + 1, 6 + 1) = 2;
X(9 + 1, 2 + 1) = 3;
X(9 + 1, 3 + 1) = 7;
X(9 + 1, 6 + 1) = 3;
disp(X)
size_array = size(X);
Kolmogor = [];
for i = 1: size_array(1)
    Kolmogor(i, i) = 0;
    for j = 1:size_array(1)
        Kolmogor(i,i) = Kolmogor(i,i) - X(i,j); %output edges    
    end
  
    for j = 1:size_array(2)
        if (i ~= j)
            Kolmogor(i,j) = X(j,i); %input edges   
        end
    end
end



Kolmogor(10,:) = ones(1,10);
b = Kolmogor \ [zeros(9,1); 1];
disp(Kolmogor);

% Immitation model
X_imitation = [];
for i = 1:size_array(1)
    for j = 1: size_array(2)
        X_imitation(i,j) = X(i,j) / sum(X(i,:)); 
    end
    if (round(sum(X_imitation(i,:)),2) ~= 1)
        fprintf('Error on build imitation matrix! i = %.2f',i);
        break;
    end
end
X_imitation = round(X_imitation,4);

times = [zeros(1,10)];
n = 10;
P_step = abs(rand(1,n));
current_state = 1; % init state
for current_t = 1:n
    times(current_state) = times(current_state) + 1;
    current_p = P_step(current_t);
    old_state = current_state;
    move = false;
    
    begin_interval = 0;
    end_interval = 0;
    for j = 1:size_array(2)
       if ((X_imitation(current_state,j) ~= 0))
           begin_interval = end_interval;
           end_interval = end_interval + X_imitation(current_state,j);
           if ((current_p > begin_interval) && (current_p <= end_interval))
               move = true;
               current_state = j;
               break;
           end
        end 
    end
    if (move)
           fprintf('move from %d -> %d\n',old_state, current_state);
    end
    
    
end

b_imitation = times/n;
disp('Mathematics model');
disp(b')
disp('Imitation model');
disp(b_imitation)
